.TH "JO" "1" "" "User Manuals" ""
.SH NAME
.PP
jo \- JSON output from a shell
.SH SYNOPSIS
.PP
jo [\-p] [\-a] [\-v] [word ...]
.SH DESCRIPTION
.PP
\f[I]jo\f[] creates a JSON string on \f[I]stdout\f[] from \f[I]word\f[]s
given it as arguments or read from \f[I]stdin\f[].
Without option \f[C]\-a\f[] it generates an object whereby each
\f[I]word\f[] is a \f[C]key=value\f[] (or \f[C]key\@value\f[]) pair with
\f[I]key\f[] being the JSON object element and \f[I]value\f[] its value.
\f[I]jo\f[] attempts to guess the type of \f[I]value\f[] in order to
create number (using \f[I]strtod(3)\f[]), string, or null values in
JSON.
.PP
\f[I]jo\f[] treats \f[C]key\@value\f[] specifically as boolean JSON
elements: if the value begins with \f[C]T\f[], \f[C]t\f[], or the
numeric value is greater than zero, the result is \f[C]true\f[], else
\f[C]false\f[].
A missing or empty value behind the colon results in a \f[C]null\f[]
JSON element.
.PP
\f[I]jo\f[] creates an array instead of an object when \f[C]\-a\f[] is
specified.
.SH EXAMPLES
.PP
Create an object.
Note how the incorrectly\-formatted float value becomes a string:
.IP
.nf
\f[C]
$\ jo\ tst=1457081292\ lat=12.3456\ cc=FR\ badfloat=3.14159.26\ name="JP\ Mens"\ nada=\ coffee\@T
{"tst":1457081292,"lat":12.3456,"cc":"FR","badfloat":"3.14159.26","name":"JP\ Mens","nada":null,"coffee":true}
\f[]
.fi
.PP
Pretty\-print an array with a list of files in the current directory:
.IP
.nf
\f[C]
$\ jo\ \-p\ \-a\ *
[
\ "Makefile",
\ "README.md",
\ "jo.1",
\ "jo.c",
\ "jo.pandoc",
\ "json.c",
\ "json.h"
]
\f[]
.fi
.PP
Create objects within objects; this works because if the first character
of value is an open brace or a bracket we attempt to decode the
remainder as JSON.
Beware spaces in strings ...
.IP
.nf
\f[C]
$\ jo\ \-p\ name=JP\ object=$(jo\ fruit=Orange\ hungry\@0\ point=$(jo\ x=10\ y=20\ list=$(jo\ \-a\ 1\ 2\ 3\ 4\ 5))\ number=17)\ sunday\@0
{
\ "name":\ "JP",
\ "object":\ {
\ \ "fruit":\ "Orange",
\ \ "hungry":\ false,
\ \ "point":\ {
\ \ \ "x":\ 10,
\ \ \ "y":\ 20,
\ \ \ "list":\ [
\ \ \ \ 1,
\ \ \ \ 2,
\ \ \ \ 3,
\ \ \ \ 4,
\ \ \ \ 5
\ \ \ ]
\ \ },
\ \ "number":\ 17
\ },
\ "sunday":\ false
}
\f[]
.fi
.SH OPTIONS
.PP
\f[I]jo\f[] understands the following options.
.TP
.B \-a
Interpret the list of \f[I]words\f[] as array values and produce an
array instead of an object.
.RS
.RE
.TP
.B \-p
Pretty\-print the JSON string on output instead of the terse one\-line
output it prints by default.
.RS
.RE
.TP
.B \-v
Show version and exit.
.RS
.RE
.SH BUGS
.PP
Probably.
.PP
If a value given to \f[I]jo\f[] expands to empty in the shell, then
\f[I]jo\f[] produces a \f[C]null\f[] in object mode, and might appear to
hang in array mode; it is not hanging, rather it\[aq]s reading
\f[I]stdin\f[].
This is not a bug.
.PP
Numeric values are converted to numbers which can produce undesired
results.
If you quote a numeric value, \f[I]jo\f[] will make it a string.
Compare the following:
.IP
.nf
\f[C]
$\ jo\ a=1.0
{"a":1}
$\ jo\ a=\\"1.0\\"
{"a":"1.0"}
\f[]
.fi
.SH RETURN CODES
.PP
\f[I]jo\f[] exits with a code 0 on success and non\-zero on failure
after indicating what caused the failure.
.SH AVAILABILITY
.PP
<http://github.com/jpmens/jo>
.SH CREDITS
.IP \[bu] 2
This program uses \f[C]json.[ch]\f[], by Joseph A.
Adams.
.SH SEE ALSO
.IP \[bu] 2
<https://stedolan.github.io/jq/>
.IP \[bu] 2
<https://github.com/micha/jsawk>
.IP \[bu] 2
strtod(3)
.SH AUTHOR
.PP
Jan\-Piet Mens <http://jpmens.net>
